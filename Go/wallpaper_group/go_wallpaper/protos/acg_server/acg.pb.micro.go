// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: acg.proto

package acgPackage

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for AcgService service

type AcgService interface {
	List(ctx context.Context, in *ListRequest, opts ...client.CallOption) (*ListResponse, error)
	Random(ctx context.Context, in *RandomRequest, opts ...client.CallOption) (*RandomResponse, error)
}

type acgService struct {
	c    client.Client
	name string
}

func NewAcgService(name string, c client.Client) AcgService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "acgPackage"
	}
	return &acgService{
		c:    c,
		name: name,
	}
}

func (c *acgService) List(ctx context.Context, in *ListRequest, opts ...client.CallOption) (*ListResponse, error) {
	req := c.c.NewRequest(c.name, "AcgService.List", in)
	out := new(ListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *acgService) Random(ctx context.Context, in *RandomRequest, opts ...client.CallOption) (*RandomResponse, error) {
	req := c.c.NewRequest(c.name, "AcgService.Random", in)
	out := new(RandomResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AcgService service

type AcgServiceHandler interface {
	List(context.Context, *ListRequest, *ListResponse) error
	Random(context.Context, *RandomRequest, *RandomResponse) error
}

func RegisterAcgServiceHandler(s server.Server, hdlr AcgServiceHandler, opts ...server.HandlerOption) error {
	type acgService interface {
		List(ctx context.Context, in *ListRequest, out *ListResponse) error
		Random(ctx context.Context, in *RandomRequest, out *RandomResponse) error
	}
	type AcgService struct {
		acgService
	}
	h := &acgServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&AcgService{h}, opts...))
}

type acgServiceHandler struct {
	AcgServiceHandler
}

func (h *acgServiceHandler) List(ctx context.Context, in *ListRequest, out *ListResponse) error {
	return h.AcgServiceHandler.List(ctx, in, out)
}

func (h *acgServiceHandler) Random(ctx context.Context, in *RandomRequest, out *RandomResponse) error {
	return h.AcgServiceHandler.Random(ctx, in, out)
}
